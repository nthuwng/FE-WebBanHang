import React, { useState, useEffect } from 'react'
import "./AdminUsersPage.css"

const AdminUsersPage = () => {
  // State qu·∫£n l√Ω danh s√°ch users
  const [users, setUsers] = useState([
    { id: 1, username: 'admin1', email: 'admin1@example.com', role: 'admin', status: 'active' },
    { id: 2, username: 'user1', email: 'user1@example.com', role: 'user', status: 'active' },
    { id: 3, username: 'user2', email: 'user2@example.com', role: 'user', status: 'inactive' },
    { id: 4, username: 'manager1', email: 'manager1@example.com', role: 'admin', status: 'active' },
  ]);

  // State cho ch·ª©c nƒÉng t√¨m ki·∫øm
  const [searchTerm, setSearchTerm] = useState('');
  
  // State cho modal form th√™m/s·ª≠a user
  const [showModal, setShowModal] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [currentUser, setCurrentUser] = useState({
    id: null,
    username: '',
    email: '',
    password: '',
    role: 'user',
    status: 'active'
  });

  // L·ªçc danh s√°ch users theo t·ª´ kh√≥a t√¨m ki·∫øm
  const filteredUsers = users.filter(user => 
    user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||
    user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
    user.role.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // M·ªü modal th√™m user m·ªõi
  const handleAddUser = () => {
    setEditMode(false);
    setCurrentUser({
      id: null,
      username: '',
      email: '',
      password: '',
      role: 'user',
      status: 'active'
    });
    setShowModal(true);
  };

  // M·ªü modal ch·ªânh s·ª≠a user
  const handleEditUser = (user) => {
    setEditMode(true);
    setCurrentUser({...user, password: ''});
    setShowModal(true);
  };

  // X·ª≠ l√Ω x√≥a user
  const handleDeleteUser = (userId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y kh√¥ng?')) {
      setUsers(users.filter(user => user.id !== userId));
    }
  };

  // X·ª≠ l√Ω thay ƒë·ªïi tr∆∞·ªùng input trong form
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCurrentUser({...currentUser, [name]: value});
  };

  // X·ª≠ l√Ω l∆∞u user (th√™m m·ªõi ho·∫∑c c·∫≠p nh·∫≠t)
  const handleSaveUser = (e) => {
    e.preventDefault();
    
    if (editMode) {
      // C·∫≠p nh·∫≠t user hi·ªán c√≥
      setUsers(users.map(user => 
        user.id === currentUser.id ? currentUser : user
      ));
    } else {
      // Th√™m user m·ªõi
      const newUser = {
        ...currentUser,
        id: users.length > 0 ? Math.max(...users.map(user => user.id)) + 1 : 1
      };
      setUsers([...users, newUser]);
    }
    
    setShowModal(false);
  };

  return (
    <div className="admin-users-page">
      <div className="users-header">
        <h1>Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h1>
        <div className="users-actions">
          <div className="search-box">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm user..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <button className="search-button">
              <i className="search-icon">üîç</i>
            </button>
          </div>
          <button className="add-button" onClick={handleAddUser}>
            <i className="add-icon">+</i> Th√™m User
          </button>
        </div>
      </div>

      <div className="users-table-container">
        <table className="users-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>T√™n ƒëƒÉng nh·∫≠p</th>
              <th>Email</th>
              <th>Quy·ªÅn</th>
              <th>Tr·∫°ng th√°i</th>
              <th>Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {filteredUsers.map(user => (
              <tr key={user.id}>
                <td>{user.id}</td>
                <td>{user.username}</td>
                <td>{user.email}</td>
                <td>
                  <span className={`role-badge ${user.role}`}>
                    {user.role}
                  </span>
                </td>
                <td>
                  <span className={`status-badge ${user.status}`}>
                    {user.status === 'active' ? 'Ho·∫°t ƒë·ªông' : 'Kh√¥ng ho·∫°t ƒë·ªông'}
                  </span>
                </td>
                <td className="actions-cell">
                  <button 
                    className="edit-button" 
                    onClick={() => handleEditUser(user)}
                  >
                    <i className="edit-icon">‚úèÔ∏è</i> S·ª≠a
                  </button>
                  <button 
                    className="delete-button" 
                    onClick={() => handleDeleteUser(user.id)}
                  >
                    <i className="delete-icon">üóëÔ∏è</i> X√≥a
                  </button>
                </td>
              </tr>
            ))}
            {filteredUsers.length === 0 && (
              <tr>
                <td colSpan="6" className="no-data">Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Modal th√™m/s·ª≠a user */}
      {showModal && (
        <div className="modal-backdrop">
          <div className="modal">
            <div className="modal-header">
              <h2>{editMode ? 'Ch·ªânh s·ª≠a User' : 'Th√™m User m·ªõi'}</h2>
              <button className="close-button" onClick={() => setShowModal(false)}>
                ‚úñ
              </button>
            </div>
            <form onSubmit={handleSaveUser}>
              <div className="form-group">
                <label>T√™n ƒëƒÉng nh·∫≠p:</label>
                <input 
                  type="text" 
                  name="username" 
                  value={currentUser.username} 
                  onChange={handleInputChange} 
                  required 
                />
              </div>
              <div className="form-group">
                <label>Email:</label>
                <input 
                  type="email" 
                  name="email" 
                  value={currentUser.email} 
                  onChange={handleInputChange} 
                  required 
                />
              </div>
              <div className="form-group">
                <label>M·∫≠t kh·∫©u:{editMode ? ' (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng thay ƒë·ªïi)' : ''}</label>
                <input 
                  type="password" 
                  name="password" 
                  value={currentUser.password} 
                  onChange={handleInputChange} 
                  required={!editMode}
                />
              </div>
              <div className="form-group">
                <label>Quy·ªÅn:</label>
                <select 
                  name="role" 
                  value={currentUser.role} 
                  onChange={handleInputChange}
                >
                  <option value="admin">Admin</option>
                  <option value="user">User</option>
                </select>
              </div>
              <div className="form-group">
                <label>Tr·∫°ng th√°i:</label>
                <select 
                  name="status" 
                  value={currentUser.status} 
                  onChange={handleInputChange}
                >
                  <option value="active">Ho·∫°t ƒë·ªông</option>
                  <option value="inactive">Kh√¥ng ho·∫°t ƒë·ªông</option>
                </select>
              </div>
              <div className="modal-footer">
                <button type="button" className="cancel-button" onClick={() => setShowModal(false)}>
                  H·ªßy
                </button>
                <button type="submit" className="save-button">
                  {editMode ? 'C·∫≠p nh·∫≠t' : 'Th√™m m·ªõi'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}

export default AdminUsersPage;